#
# This is the Archipelago configuration file.
#


[ARCHIPELAGO]
# Switch peer processes to run as this user.
# Allowed values: Any username available on the node.
USER = archipelago
# Switch peer processes to run as this group.
# Allowed values: Any groupname available on the node.
GROUP = archipelago
# Enable Archipelago's blktap support.
# Allowed values: True/False
BLKTAP_ENABLED = True
# Set umask value for the non-peer components, i.e. processes and external tools
# (e.g. Ganeti's ExtStorage scripts).
# Allowed values: Any valid umask setting in any recognizable form by Python
# (e.g. ‘0o022’, ‘022’, ‘18’).
UMASK = 0o007


[XSEG]
# Max number of ports in the segment.
# Allowed values: Any positive integer.
SEGMENT_PORTS = 2048
SEGMENT_DYNPORTS = 1024
# The size of the shared memory segment in MiB.
# Allowed values: Any positive integer.
#
# A good rule of thumb for one to calculate an appropriate segment size would be
# the following formula:
#     256 + 128 * 0.5 * NR_VM_VOLUMES
# where:
#     - 256 is the base size,
#     - 128 is the average max number of requests,
#     - 0.5 is the max request size in MiB (512KB), (This is enforced by the
#       tapdisk process.)
#     - NR_VM_VOLUMES is the expected number of volumes the host will have.
#
# or for a Pithos node:
#     256 + NR_OF_GUNICORN_WORKERS * POOL_SIZE * 4
# where:
#     - 256 is the base size,
#     - 4 is the max request size in MiB. (This is enforced by Pithos logic.)
SEGMENT_SIZE = 2048
# Start of port range that can be used by the vlmc tool.
# Allowed values: Any port in the range [0-SEGMENT_PORTS). It must not conflict
# with any other port.
VTOOL_START = 1003
# End of port range that can be used by the vlmc tool
# Allowed values: Any port in the range (VTOOL_START-SEGMENT_PORTS]. It must not
# conflict with any other port.
VTOOL_END = 1022


[PEERS]
# A list of roles that will be instantiated on the current node.
# Allowed values: A list with space separated values of the available peer roles
# (blockerm, blockerb, mapperd, vlmcd).
ROLES = blockerb blockerm mapperd vlmcd poold
# The order that the roles will be started or stopped (in reverse).
# Allowed values: A list with space separated values of the available peer roles
# (blockerm, blockerb, mapperd, vlmcd).
ORDER = blockerb blockerm mapperd vlmcd poold


# Each peer must have its own section to hold its configuration. Mandatory peer
# roles:
# 	blockerb
# 	blockerm
# 	mapperd
# 	vlmcd
#
# Generic peer options:
#
#   type:         Type of the peer. Specifies the peer that will fulfil this
#                 role. Available peer types: rados_blocker, file_blocker,
#                 mapperd, vlmcd.
#   portno_start: Start of port range that will be used by the peer.
#   portno_end:   End of port range that will be used by the peer.
#   nr_ops:       Max number of flying operations. Must be a power of 2.
#   umask:        Set umask of peer.
#   log_level:    Verbosity levels for each xseg peer:
#                   0 - Error
#                   1 - Warnings
#                   2 - Info
#                   3 - Debug (Warning: debug level 3 logs A LOT!)
#   nr_threads:   Number of threads of each peer. Currently only blockers support
#                 threads with the following tricks:
#                   a) Threads in file_blocker are I/O threads that perform
#                      blocking I/O.
#                   b) Threads in rados_blocker are processing threads. For lock
#                      congestion reasons, avoid setting them to a value larger
#                      than 4.

# file_blocker-specific options:
#
#   nr_threads:     Number of I/O threads to serve requests.
#   archip_dir:     Directory where the files will reside. This must be one
#                   filesystem and must not contain symlinks or mountpoints to
#                   different filesystems.
#   lock_dir:       Directory where the file based locks will reside. This must
#                   be one filesystem and must not contain symlinks or
#                   mountpoints to different filesystems.
#   fdcache:        Number of file descriptors to be kept open.
#   direct:         Set 'filed' to use the directIO option.
#   pithos-migrate: Enable 'filed' to lazily migrate Pithos objects from their old
#                   location to their new one.
#
# rados_blocker-specific options:
#
#   nr_threads: Number of threads to serve requests.
#   pool:       RADOS pool where the objects will be stored.
[blockerb]
type = rados_blocker
portno_start = 1000
portno_end = 1000
log_level = 2
nr_ops = 512
pool = blocks
#cephx_id = admin
umask = 007

[blockerm]
type = rados_blocker
portno_start = 1002
portno_end = 1002
log_level = 2
nr_ops = 512
pool = maps
#cephx_id = admin
umask = 007

# mapperd-specific options:
#
#   blockerb_port: Port for communication with the blocker responsible for the
#                  data blocks.
#   blockerm_port: Port for communication with the blocker responsible for the
#                  maps.
[mapperd]
type = mapperd
portno_start = 1001
portno_end = 1001
log_level = 2
nr_ops = 512
blockerb_port = 1000
blockerm_port = 1002
umask = 007

# vlmcd-specific options:
#
#   blocker_port: Port for communication with the blocker responsible for the
#                 data blocks.
#   mapper_port:  Port for communication with the mapper.
[vlmcd]
type = vlmcd
portno_start = 500
portno_end = 999
log_level = 2
nr_ops = 512
blocker_port = 1000
mapper_port = 1001
umask = 007

# poold-specific options:
#
#   logging_conf: Set logging configuration file.
#   socket_path:  Set socket path (default: /var/run/archipelago/poold.socket).
#   pidfile:      Set pidfile (default: /var/run/archipelago/poold.pid).
[poold]
type = poold
portno_start = 1
portno_end = 200
umask = 007
logging_conf = /etc/archipelago/logging.conf
#socket_path = /var/run/archipelago/poold.socket
#pidfile = /var/run/archipelago/poold.pid
